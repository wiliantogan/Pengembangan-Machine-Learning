# -*- coding: utf-8 -*-
"""Proyek_Pengembangan_Machine_Learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UBF-6XLetvIW99My6YSLTLyk6YVUb8jy

**Nama : Wilianto, S.T., S.Pd., M.M, M.T.I.**

>Dataset : "Movie Genre Data"\
>Sumber : Kaggle\
>Link Dataset : https://www.kaggle.com/lokkagle/nlp-movie-genre-classification/data

Libraries
"""

from google.colab import drive

# u/ dataframe
import pandas as pd
import re

# u/ split data
from sklearn.model_selection import train_test_split

# u/ preprocessing dan layer
import tensorflow as tf
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.layers import LSTM,Dense,Embedding,Dropout
from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import Adam

# u/ visualisasi plot
import matplotlib.pyplot as plt

"""Mount ke Drive"""

drive.mount('/content/drive/')

"""Read Dataset dari Drive"""

df = pd.read_csv("/content/drive/MyDrive/Dicoding/kaggle_movie_train.csv")
df.head()

"""Memeriksa jumlah value tiap genre"""

df['genre'].value_counts()

"""Kita akan menggunakan 4 genre saja kali ini yaitu: comedy, action, horror, dan adventure"""

# Menghapus genre selain 4 genre tersebut
df = df[~df['genre'].isin(['drama','thriller','sci-fi','other','romance'])]
df['genre'].value_counts()

"""Proses awal text kolom"""

# Menghapus special character di kolom text
df['Text'] = df['text'].map(lambda x: re.sub(r'\W+', ' ', x))
# drop kolom text lama
df = df.drop(['id','text'], axis=1)
df.head()

"""Pemeriksaan data kosong"""

# Mememriksa nilai kosong / nan
# Jika true maka ada dan jika false maka tidak ada nilai kosong / nan
df.isnull().values.any()

"""Pelabelan genre"""

genre = pd.get_dummies(df.genre)
df_genre = pd.concat([df, genre], axis=1)
df_genre = df_genre.drop(columns='genre')
df_genre.head()

"""Merubah tipe data"""

# Merubah tipe data menjadi str dan numpy array 
text = df_genre['Text'].astype(str)
label = df_genre[['comedy', 'action','horror','adventure']].values

"""Split dataset menjadi 20% validation/test"""

genre_train, genre_test, label_train, label_test = train_test_split(text, label, test_size = 0.2)

"""Penggunaan tokenizer"""

# Konversi ke sequence
tokenizer = Tokenizer(num_words=5000, oov_token='x')
tokenizer.fit_on_texts(genre_train) 
tokenizer.fit_on_texts(genre_test)
 
sekuens_train = tokenizer.texts_to_sequences(genre_train)
sekuens_test = tokenizer.texts_to_sequences(genre_test)
 
padded_train = pad_sequences(sekuens_train) 
padded_test = pad_sequences(sekuens_test)

"""Pemodelan Sequential dengan Embedding dan LSTM"""

model = Sequential([
    Embedding(input_dim=5000, output_dim=16),
    LSTM(64),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(4, activation='softmax')
])

"""Model compile dengan optimizer Adam"""

#Adam(learning_rate=0.00146, name='Adam')
model.compile(optimizer = 'Adam',loss = 'categorical_crossentropy',metrics = ['accuracy'])
model.summary()

"""Penggunaan callback untuk accuracy dan validation diatas 90%"""

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.9 and logs.get('val_accuracy')>0.9):
      print("\nAkurasi train dan validasi didapat telah mencapai nilai > 90%!")
      self.model.stop_training = True
callbacks = myCallback()

"""Melatih model"""

num_epochs = 30
history = model.fit(padded_train, label_train, epochs=num_epochs, validation_data=(padded_test, label_test), verbose=2, callbacks=[callbacks])

"""Membuat plot loss"""

# Plot Accuracy
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Akurasi Model')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

"""Membuat plot accuracy"""

# Plot Loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss Model')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()